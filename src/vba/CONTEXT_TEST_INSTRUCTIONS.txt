========================================================================
CONTEXT-DEPENDENT REFRESH DIAGNOSTIC TESTS
========================================================================

OVERVIEW:
---------
The mod_TestWithContext.bas module contains specialized diagnostic tests 
that specifically target EXECUTION CONTEXT issues. These tests are designed 
to identify why PowerQuery refresh fails when triggered automatically but 
works when triggered manually.

This is a common Excel/VBA issue where the execution context (how a procedure
is called) can affect whether operations succeed or fail, even with identical code.

TEST PROCEDURE:
--------------
The main test procedure "TestContextDependentRefresh" will test refreshing
the Power Query connection in four different execution contexts:

1. DIRECT CALL - Basic VBA procedure call (TestSpecificContext rtcDirectCall)
   This tests the refresh when directly called from another VBA procedure.

2. YES/NO DIALOG - Triggered by clicking "Yes" in a dialog (rtcYesNoPrompt)
   This most closely resembles your issue where the refresh fails after 
   clicking "Yes" to the refresh prompt.

3. COMMAND BAR BUTTON - Triggered via UI button click (rtcCommandBarButton)
   This tests if the refresh behaves differently when triggered by a UI 
   button action vs. programmatic call.

4. TIMER EVENT - Triggered by Application.OnTime event (rtcTimerEvent)
   This tests if asynchronous execution affects the refresh behavior.

HOW TO RUN THE TEST:
-------------------
1. Open the Excel workbook
2. Press Alt+F11 to open the VBA Editor
3. Press Alt+F8 to open the Macro dialog
4. Select "TestContextDependentRefresh" and click Run
5. Follow the on-screen prompts:
   - The test will first try a direct refresh call
   - It will then create a temporary toolbar with a "Test Refresh" button
   - You'll need to click the button when prompted
   - After the button test, a timer-based test will run automatically

INTERPRETING RESULTS:
--------------------
Pay special attention to which contexts SUCCEED and which contexts FAIL:

1. If ONLY the YES/NO DIALOG context fails but others succeed:
   This confirms the issue is related to the message box response context,
   which matches the behavior in your application when clicking "Yes" to 
   the refresh prompt.

2. If ONLY the TIMER EVENT context fails but others succeed:
   This suggests the issue might be related to asynchronous execution 
   timing or state.

3. If ALL contexts fail:
   The issue is likely not context-dependent but rather a fundamental 
   problem with the Power Query connection itself.

4. If ALL contexts succeed:
   This suggests the issue in your main code might be related to some other
   factors like sheet activation/deactivation during the refresh process
   or state of Excel objects.

EMERGENCY CLEANUP:
----------------
If something goes wrong during testing and you need to cancel:
1. Press Alt+F8 to open the Macro dialog
2. Run the "CancelAllTests" procedure to clean up any temporary UI elements
   and cancel any pending timer events.

========================================================================
LIKELY SCENARIOS AND SOLUTIONS
========================================================================

SCENARIO 1: YES/NO DIALOG CONTEXT FAILS
If the refresh fails specifically after clicking "Yes" in a dialog box,
the problem is likely with the Excel message queue and event handling.

POTENTIAL SOLUTIONS:
1. Add a delay before the refresh:
   ```
   Application.Wait Now + TimeSerial(0, 0, 1) ' Wait 1 second
   wbConn.Refresh
   ```

2. Use DoEvents before and after the MsgBox to clear the message queue:
   ```
   DoEvents
   If MsgBox("Refresh data?", vbYesNo) = vbYes Then
       DoEvents
       wbConn.Refresh
   End If
   ```

3. Split the operation into two separate procedure calls:
   ```
   If MsgBox("Refresh data?", vbYesNo) = vbYes Then
       Application.OnTime Now, "PerformRefreshInSeparateContext"
   End If
   ```

SCENARIO 2: TIMER EVENT CONTEXT FAILS
If the refresh fails when triggered by a timer event, the issue is likely
related to the application state during asynchronous operations.

POTENTIAL SOLUTIONS:
1. Ensure the workbook is activated before refresh:
   ```
   ThisWorkbook.Activate
   wbConn.Refresh
   ```

2. Reset application properties before refresh:
   ```
   Application.EnableEvents = False
   Application.ScreenUpdating = False
   Application.Calculation = xlCalculationManual
   DoEvents
   wbConn.Refresh
   ' Restore properties afterward
   ```

========================================================================
